#ifndef __HbbEventHelpers__
#define __HbbEventHelpers__

#include "TLorentzVector.h"
#include "TMath.h"
#include "UserCode/HbbAnalysis/interface/HbbEvent.hh"
#include "UserCode/HbbAnalysis/interface/Objects.hh"

namespace ajg{

//-----------------------------------------------------------------------------
template <class T>
TLorentzVector FourMomentum(const T& v) {
  double lpx = v.pT*cos(v.phi);
  double lpy = v.pT*sin(v.phi);
  double lpz = v.pT*sinh(v.eta);
  double lE = v.pT*cosh(v.eta);//v.E
  return TLorentzVector(lpx,lpy,lpz,lE);
}
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
double DR(double p1phi, double p1eta, double p2phi, double p2eta);
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
struct GenPair{
  HbbAnalysis::GenParticle* part1;
  HbbAnalysis::GenParticle* part2;
  //Default Constructor
  GenPair(){
    part1 = 0;
    part2 = 0;
  }
  //Specific Constructor
  GenPair(HbbAnalysis::GenParticle* p1, HbbAnalysis::GenParticle* p2){
    part1 = p1;
    part2 = p2;
  }
  //Get charge of the pair
  int PairCharge(){
    //Get charge from pdgID: i.e. electron = 11 => -1*(11/11) = charge of -1
    int charge1 = -1 * (part1->partVars().pdgId / abs(part1->partVars().pdgId));
    int charge2 = -1 * (part2->partVars().pdgId / abs(part2->partVars().pdgId));
    return (charge1 * charge2);
  }
  //Get mass of the pair
  int PairMass(){
    TLorentzVector tvec1 = ajg::FourMomentum(part1->partVars());
    TLorentzVector tvec2 = ajg::FourMomentum(part2->partVars());
    return ((tvec1+tvec2).M());
  }
};
//----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
template <class T>
struct RecoPair{
  T* part1;
  T* part2;
  //Default Constructor
  RecoPair(){
    part1 = 0;
    part2 = 0;
  }
  RecoPair(T* p1, T* p2){
    part1 = p1;
    part2 = p2;
  }
  //Get charge of the pair
  double PairCharge(){
    return (part1->recoVars().charge * part2->recoVars().charge);
  }
  //Get mass of the pair
  double PairMass(){
    TLorentzVector tvec1 = ajg::FourMomentum(part1->recoVars());
    TLorentzVector tvec2 = ajg::FourMomentum(part2->recoVars());
    return ((tvec1+tvec2).M());
  }
};
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
template <class T>
HbbAnalysis::GenParticle* GenMatchFromReco(T reco, std::vector<HbbAnalysis::GenParticle*> genVec, double dr){
  if (genVec.size() > 0){
    std::vector<double> drVec;
    drVec.resize(genVec.size());
    double recoPhi = reco->recoVars().phi;
    double recoEta = reco->recoVars().eta;
    for (unsigned i = 0; i < genVec.size(); ++i){
      double partPhi = genVec[i]->partVars().phi;
      double partEta = genVec[i]->partVars().eta;
      drVec[i] = ajg::DR(recoPhi,recoEta,partPhi,partEta);
    }
    std::vector<double>::iterator min_it  = min_element(drVec.begin(),drVec.end());
    unsigned min_index = unsigned(min_it-drVec.begin());
    if (drVec[min_index] < dr){
      return genVec[min_index];
    }
  }//If there is at least one gen particle
  return 0;
}
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
template <class T>
HbbAnalysis::GenJet* GenJetMatchFromReco(T reco, std::vector<HbbAnalysis::GenJet*> genVec, double dr){
  if (genVec.size() > 0){
    std::vector<double> drVec;
    drVec.resize(genVec.size());
    double recoPhi = reco->recoVars().phi;
    double recoEta = reco->recoVars().eta;
    for (unsigned i = 0; i < genVec.size(); ++i){
      double partPhi = genVec.at(i)->genJetVars().phi;
      double partEta = genVec.at(i)->genJetVars().eta;
      drVec.at(i) = ajg::DR(recoPhi,recoEta,partPhi,partEta);
    }
    std::vector<double>::iterator min_it  = min_element(drVec.begin(),drVec.end());
    unsigned min_index = unsigned(min_it-drVec.begin());
    if (drVec[min_index] < dr){
      return genVec[min_index];
    }
  }//If there is at least one gen particle
  return 0;
}
//-----------------------------------------------------------------------------

template <class T>
HbbAnalysis::GenJet* GenJetMatchFromGenJet(T genJet, std::vector<HbbAnalysis::GenJet*> genVec, double dr){
  if (genVec.size() > 0){
    std::vector<double> drVec;
    drVec.resize(genVec.size());
    double recoPhi = genJet->genJetVars().phi;
    double recoEta = genJet->genJetVars().eta;
    for (unsigned i = 0; i < genVec.size(); ++i){
      double partPhi = genVec.at(i)->genJetVars().phi;
      double partEta = genVec.at(i)->genJetVars().eta;
      drVec.at(i) = ajg::DR(recoPhi,recoEta,partPhi,partEta);
    }
    std::vector<double>::iterator min_it  = min_element(drVec.begin(),drVec.end());
    unsigned min_index = unsigned(min_it-drVec.begin());
    if (drVec[min_index] < dr){
      return genVec[min_index];
    }
  }//If there is at least one gen particle
  return 0;
}
//-----------------------------------------------------------------------------
HbbAnalysis::GenParticle* PartonMatchFromGenJet(HbbAnalysis::GenJet* genJet, std::vector<HbbAnalysis::GenParticle*> genVec, double dr);
//-----------------------------------------------------------------------------

std::vector<HbbAnalysis::MCVars> GetBConstituents(HbbAnalysis::GenJet* genJet);

}//namespace
#endif
